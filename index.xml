<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome on RHTE 2023 Edge Lab</title><link>https://RHTE-2023-Edge-Lab.github.io/</link><description>Recent content in Welcome on RHTE 2023 Edge Lab</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Dec 2022 15:22:04 +0100</lastBuildDate><atom:link href="https://RHTE-2023-Edge-Lab.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Goal</title><link>https://RHTE-2023-Edge-Lab.github.io/use-case/goal/</link><pubDate>Tue, 13 Dec 2022 15:22:04 +0100</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/use-case/goal/</guid><description>Your goal will be to deploy everything needed to: read the parcel RFID (using arduino and ESP32), send data to a MQTT broker over wifi, transform those data using Camel-K and send relevant events over Kafka to the headquarter for reporting.
The headquarter is already setup and is waiting for your data!
Once your setup is complete, you should be able to scan your parcels (look around you, there should be four parcels on your table!</description></item><item><title>Present yourself!</title><link>https://RHTE-2023-Edge-Lab.github.io/preparation/presentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/preparation/presentation/</guid><description> Fill-in the provided Name Tent templates with your name, role and location. Draw yourself as a Super Hero. Do not forget to draw your Fedora! Add a few super powers!</description></item><item><title>Architecture</title><link>https://RHTE-2023-Edge-Lab.github.io/use-case/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/use-case/architecture/</guid><description>Data flow 1. The ESP8266 scans incoming and outgoing parcels using an RFID scanner. One ESP8266 is dedicated for incoming parcels and one ESP8266 is dedicated for outgoing parcels.
2. The ESP8266 dedicated to incoming parcels writes the RFID tag identifier in the mqtt-in MQTT topic. The ESP8266 dedicated to outgoing parcels writes the RFID tag identifier in the mqtt-out MQTT topic.
3. The Camel K operator transforms and enriches MQTT messages stored in MQTT topics and injects those enriched data in the kafka-in and kafka-out Kafka topics.</description></item><item><title>Linux</title><link>https://RHTE-2023-Edge-Lab.github.io/pre-requisites/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/pre-requisites/linux/</guid><description>OpenShift CLI Install VScode.
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc sudo sh -c &amp;#39;echo -e &amp;#34;[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&amp;#34; &amp;gt; /etc/yum.repos.d/vscode.repo&amp;#39; dnf check-update sudo dnf install code Install the PlatformIO IDE plugin for VScode with the following command:
code --install-extension platformio.platformio-ide</description></item><item><title>Pair up!</title><link>https://RHTE-2023-Edge-Lab.github.io/preparation/duo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/preparation/duo/</guid><description>For the rest of this Lab, you will work in pair programming. With your team members, pair up and assign roles!
Duo A is in charge of implementing the code on ESP8266 to scan the incoming parcels using RFID and send the data over MQTT. Duo B is in charge of implementing the code on ESP8266 to scan the outgoing parcels using RFID and send the data over MQTT. Duo C is in charge of setting up Kafka Broker and implementing the Camel-K integration.</description></item><item><title>Organization</title><link>https://RHTE-2023-Edge-Lab.github.io/use-case/organization/</link><pubDate>Tue, 13 Dec 2022 15:22:04 +0100</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/use-case/organization/</guid><description>At your table, there should be six persons and there should be ten tables. During this lab, you will work in pair programming (that is to say: three duo).
Duo A is in charge of implementing the code on ESP8266 to scan the incoming parcels using RFID and send the data over MQTT. Duo B is in charge of implementing the code on ESP8266 to scan the outgoing parcels using RFID and send the data over MQTT.</description></item><item><title>MacOS</title><link>https://RHTE-2023-Edge-Lab.github.io/pre-requisites/macos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/pre-requisites/macos/</guid><description>Go to the VScode download page, download the MacOS package and install it.
Open VScode and install the PlatformIO IDE plugin.</description></item><item><title>OpenShift</title><link>https://RHTE-2023-Edge-Lab.github.io/use-case/openshift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/use-case/openshift/</guid><description>OpenShift cluster An OpenShift cluster is already deployed via RHPDS environment and &amp;ldquo;OpenShift 4.11 Workshop&amp;rdquo; service.
No action is required on your side.
The headquarter and warehouses have dedicated namespaces on this OpenShift cluster:
headquarter warehouse-athens warehouse-brno warehouse-brussels warehouse-bucharest warehouse-dublin warehouse-lisboa warehouse-london warehouse-paris warehouse-stockolm warehouse-varsovia OpenShift Operators All the needed operators are already installed on the Openshift cluster. In the rest of this Lab you will just need to consume the CRD provided by these operators.</description></item><item><title>Windows</title><link>https://RHTE-2023-Edge-Lab.github.io/pre-requisites/windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/pre-requisites/windows/</guid><description>TODO</description></item></channel></rss>