<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome on RHTE 2023 Edge Lab</title><link>https://RHTE-2023-Edge-Lab.github.io/</link><description>Recent content in Welcome on RHTE 2023 Edge Lab</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Dec 2022 15:22:04 +0100</lastBuildDate><atom:link href="https://RHTE-2023-Edge-Lab.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Goal</title><link>https://RHTE-2023-Edge-Lab.github.io/use-case/goal/</link><pubDate>Tue, 13 Dec 2022 15:22:04 +0100</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/use-case/goal/</guid><description>Your goal will be to deploy everything needed to: read the parcel RFID (using arduino and ESP32), send data to a MQTT broker over wifi, transform those data using Camel-K and send relevant events over Kafka to the headquarter for reporting.
The headquarter is already setup and is waiting for your data!
Once your setup is complete, you should be able to scan your parcels (look around you, there should be four parcels on your table!</description></item><item><title>Fix permissions on /dev/ttyUSB0 (Linux only)</title><link>https://RHTE-2023-Edge-Lab.github.io/esp8266/fix-permissions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/esp8266/fix-permissions/</guid><description>The /dev/ttyUSB0 device belongs to the &amp;ldquo;dialout&amp;rdquo; group. Therefore, your user should belong to this group to configure the ESP8266.
Run this command:
sudo usermod -a -G dialout $(id -un) Then, close Visual Studio Code and re-run it with the new group membership:
su -c code $(id -un)</description></item><item><title>Install the MQTT Broker (duo A or B)</title><link>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/mqtt-broker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/mqtt-broker/</guid><description>Deploy an MQTT broker in your namespace, by deploying this Custom Resource Definition.
To do so, connect to the OpenShift console, select the namespace of your team and click the + button in the top-right corner. Then, copy and paste the following content.
apiVersion: broker.amq.io/v1beta1 kind: ActiveMQArtemis metadata: name: mqtt spec: acceptors: - connectionsAllowed: 5 expose: true name: mqtt port: 1883 protocols: mqtt sslEnabled: false adminPassword: public adminUser: admin console: expose: true deploymentPlan: image: placeholder jolokiaAgentEnabled: false journalType: nio managementRBACEnabled: true messageMigration: false persistenceEnabled: false requireLogin: true size: 1 Now, create a new Kubernetes service to expose your MQTT broker to the internet.</description></item><item><title>Present yourself!</title><link>https://RHTE-2023-Edge-Lab.github.io/preparation/presentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/preparation/presentation/</guid><description> Fill-in the provided Name Tent templates with your name, role and location. Draw yourself as a Super Hero. Do not forget to draw your Fedora! Add a few super powers!</description></item><item><title>Architecture</title><link>https://RHTE-2023-Edge-Lab.github.io/use-case/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/use-case/architecture/</guid><description>Data flow 1. The ESP8266 scans incoming and outgoing parcels using an RFID scanner. One ESP8266 is dedicated for incoming parcels and one ESP8266 is dedicated for outgoing parcels.
2. The ESP8266 dedicated to incoming parcels writes the RFID tag identifier in the mqtt-in MQTT topic. The ESP8266 dedicated to outgoing parcels writes the RFID tag identifier in the mqtt-out MQTT topic.
3. The Camel K operator transforms and enriches MQTT messages stored in MQTT topics and injects those enriched data in the kafka-in and kafka-out Kafka topics.</description></item><item><title>Connect your ESP8266</title><link>https://RHTE-2023-Edge-Lab.github.io/esp8266/connect-esp8266/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/esp8266/connect-esp8266/</guid><description>Connect ESP8266 to your computer via USB connector.</description></item><item><title>Create the incoming MQTT Topic (duo A)</title><link>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/mqtt-topic-in/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/mqtt-topic-in/</guid><description>Create a topic in your MQTT broker by deploying this Custom Resource Definition.
To do so, connect to the OpenShift console, select the namespace of your team and click the + button in the top-right corner. Then, copy and paste the following content.
kind: ActiveMQArtemisAddress apiVersion: broker.amq.io/v1beta1 metadata: name: esp8266-in spec: addressName: esp8266-in queueName: myQueue0 routingType: anycast</description></item><item><title>Linux</title><link>https://RHTE-2023-Edge-Lab.github.io/pre-requisites/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/pre-requisites/linux/</guid><description>OpenShift CLI Install VScode.
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc sudo sh -c &amp;#39;echo -e &amp;#34;[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&amp;#34; &amp;gt; /etc/yum.repos.d/vscode.repo&amp;#39; dnf check-update sudo dnf install code Install the PlatformIO IDE plugin for VScode with the following command:
code --install-extension platformio.platformio-ide</description></item><item><title>Pair up!</title><link>https://RHTE-2023-Edge-Lab.github.io/preparation/duo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/preparation/duo/</guid><description>For the rest of this Lab, you will work in pair programming. With your team members, pair up and assign roles!
Duo A is in charge of implementing the code on ESP8266 to scan the incoming parcels using RFID and send the data over MQTT. Duo B is in charge of implementing the code on ESP8266 to scan the outgoing parcels using RFID and send the data over MQTT. Duo C is in charge of setting up Kafka Broker and implementing the Camel-K integration.</description></item><item><title>Organization</title><link>https://RHTE-2023-Edge-Lab.github.io/use-case/organization/</link><pubDate>Tue, 13 Dec 2022 15:22:04 +0100</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/use-case/organization/</guid><description>At your table, there should be six persons and there should be ten tables. During this lab, you will work in pair programming (that is to say: three duo).
Duo A is in charge of implementing the code on ESP8266 to scan the incoming parcels using RFID and send the data over MQTT. Duo B is in charge of implementing the code on ESP8266 to scan the outgoing parcels using RFID and send the data over MQTT.</description></item><item><title>Create a PlatformIO project</title><link>https://RHTE-2023-Edge-Lab.github.io/esp8266/create-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/esp8266/create-project/</guid><description>Open VScode and click on the home icon in the status bar.
Then, in the PlatformIO splash screen, click New Project.
Then choose a name for your project (free choice), select the board WeMos D1 R2 and mini, leave the Arduino framework selected and click Finish.
Then, you should see the following files in the left pane of your VScode.</description></item><item><title>Create the outgoing MQTT Topic (duo B)</title><link>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/mqtt-topic-out/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/mqtt-topic-out/</guid><description>Create a topic in your MQTT broker by deploying this Custom Resource Definition.
To do so, connect to the OpenShift console, select the namespace of your team and click the + button in the top-right corner. Then, copy and paste the following content.
kind: ActiveMQArtemisAddress apiVersion: broker.amq.io/v1beta1 metadata: name: esp8266-out spec: addressName: esp8266-out queueName: myQueue0 routingType: anycast</description></item><item><title>MacOS</title><link>https://RHTE-2023-Edge-Lab.github.io/pre-requisites/macos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/pre-requisites/macos/</guid><description>Go to the VScode download page, download the MacOS package and install it.
Open VScode and install the PlatformIO IDE plugin.</description></item><item><title>Add required libraries</title><link>https://RHTE-2023-Edge-Lab.github.io/esp8266/libraries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/esp8266/libraries/</guid><description>Add the following libraries to your PlatformIO project.
MFRC522 In the PlatformIO home screen, open Libraries. In the search field, type: header:MFRC522.h The first result should be MFRC522 by Miguel Andr√© Balboa. Click to open it. Click Add to project Click Add PubSubClient In the PlatformIO home screen, open Libraries. In the search field, type: PubSubClient The first result should be PubSubClient by Nick O&amp;rsquo;Leary.</description></item><item><title>Final verification (duo A and B)</title><link>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/verification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/verification/</guid><description>Operator CRD Navigate in the OpenShift Administrator console, Operators &amp;gt; Installed Operators. Click on the AMQ Broker for RHEL 8.x operator. Open the All instances tab. Make sure you have the following objects: Pods Go to Workload &amp;gt; Pods and make sure the pod mqtt-ss-0 is present.
Services Go to Networking &amp;gt; Services and make sure a service named mqtt-lb is present.</description></item><item><title>OpenShift</title><link>https://RHTE-2023-Edge-Lab.github.io/use-case/openshift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/use-case/openshift/</guid><description>OpenShift cluster An OpenShift cluster is already deployed via RHPDS environment and &amp;ldquo;OpenShift 4.11 Workshop&amp;rdquo; service.
No action is required on your side.
The headquarter and warehouses have dedicated namespaces on this OpenShift cluster:
headquarter warehouse-athens warehouse-brno warehouse-brussels warehouse-bucharest warehouse-dublin warehouse-lisboa warehouse-london warehouse-paris warehouse-stockolm warehouse-varsovia OpenShift Operators All the needed operators are already installed on the Openshift cluster. In the rest of this Lab you will just need to consume the CRD provided by these operators.</description></item><item><title>Test the MQTT broker (duo A and B)</title><link>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/test/</guid><description>Go to the OpenShift Administrator console and click the command line terminal icon in the top-right corner to open a Web Terminal. In the Web Terminal, open two tabs: one to send messages, one to receive messages.
On the first terminal, connect to your MQTT Broker to read messages.
# Get the load balancer URL generated from the service created export LOAD_BALANCER_URL = $(oc get svc mqtt-lb -ojsonpath=&amp;#34;{.status.loadBalancer.ingress[0].hostname}&amp;#34;) # Subscribe to MQTT topic mosquitto_sub -t esp8266-in -h ${LOAD_BALANCER_URL} -p 1883 -u admin -P public On the second terminal, push new messages to your MQTT Broker.</description></item><item><title>Windows</title><link>https://RHTE-2023-Edge-Lab.github.io/pre-requisites/windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/pre-requisites/windows/</guid><description>TODO</description></item><item><title>Develop the ESP8266 firmware</title><link>https://RHTE-2023-Edge-Lab.github.io/esp8266/development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/esp8266/development/</guid><description>In the left pane of VScode, click the top-left icon to diplay the project&amp;rsquo;s files.
Replace the content of src/main.cpp with the following code.
Warning: you will have to adapt the code a little bit. See below for explanations.
#include &amp;lt;Arduino.h&amp;gt;#include &amp;lt;SPI.h&amp;gt;#include &amp;lt;MFRC522.h&amp;gt;#include &amp;lt;ESP8266WiFi.h&amp;gt;#include &amp;lt;PubSubClient.h&amp;gt; MFRC522 mfrc522; WiFiClient espClient; PubSubClient client(espClient); //WIFI const char* ssid = &amp;#34;&amp;lt;wifi_ssid&amp;gt;&amp;#34;; // SSID Wifi const char* password = &amp;#34;&amp;lt;wifi_password&amp;gt;&amp;#34;; //mot de passe Wifi // MQTT Broker const char *mqtt_broker = &amp;#34;&amp;lt;AWS LB address for MQTT service&amp;gt;&amp;#34;; const char *mqtt_topic = &amp;#34;esp8266-in&amp;#34;; const char *mqtt_username = &amp;#34;&amp;lt;MQTT user&amp;gt;&amp;#34;; const char *mqtt_password = &amp;#34;&amp;lt;MQTT password&amp;gt;&amp;#34;; const int mqtt_port = &amp;lt;MQTT port&amp;gt;; void setup() { Serial.</description></item><item><title>Test the ESP8266 firmware</title><link>https://RHTE-2023-Edge-Lab.github.io/esp8266/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/esp8266/test/</guid><description> Connect to your ESP8266 console Place an RFID tag on the reader Check that the tag id is printed on the console The tag is also sent over Wifi to the MQTT broker.</description></item></channel></rss>