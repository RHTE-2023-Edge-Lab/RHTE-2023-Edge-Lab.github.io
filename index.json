[{"uri":"https://RHTE-2023-Edge-Lab.github.io/use-case/","title":"Use Case","tags":[],"description":"","content":"Chapter 1 Use case You and your team are part of the FSC (Fedora Shipping Company), a company that provides shipping and delivery services in EMEA.\nCurrently, the company has one Headquarter and ten Warehouses spread across Europe.\nYou and your team (watch around you, there are people around your table!) have been hired to setup the required IT infrastructure to track parcels along their journey.\n"},{"uri":"https://RHTE-2023-Edge-Lab.github.io/use-case/goal/","title":"Goal","tags":[],"description":"","content":"Your goal will be to deploy everything needed to: read the parcel RFID (using arduino and ESP32), send data to a MQTT broker over wifi, transform those data using Camel-K and send relevant events over Kafka to the headquarter for reporting.\nThe headquarter is already setup and is waiting for your data!\nOnce your setup is complete, you should be able to scan your parcels (look around you, there should be four parcels on your table!) and see them move over the global map.\n  "},{"uri":"https://RHTE-2023-Edge-Lab.github.io/pre-requisites/general/","title":"General","tags":[],"description":"","content":"OpenShift Cluster OpenShift cluster is already deployed via RHPDS environment and \u0026ldquo;OpenSHift 4.11 Workshop\u0026rdquo; service. The headquarter and warehouses corresponding to different namespace on this Openshift cluster on this way :\n Namespace n°1 : headquarter Namespace n°2 : warehouse-athens Namespace n°3 : warehouse-brno Namespace n°4 : warehouse-brussels Namespace n°5 : warehouse-bucharest Namespace n°6 : warehouse-dublin Namespace n°7 : warehouse-lisboa Namespace n°8 : warehouse-london Namespace n°9 : warehouse-paris Namespace n°10 : warehouse-stockolm Namespace n°11 : warehouse-vasovia  OpenShift Operators All needed operators are already installed on the Openshift cluster and you will just need to consume CRD provided by these operators during this session :\n  Red Hat Integration - AMQ Broker for RHEL 8 (Multiarch)\nAMQ Broker Operator for RHEL 8 (Multiarch) provides the ability to deploy and manage stateful AMQ Broker broker clusters\n  Red Hat Integration - AMQ Streams\nRed Hat AMQ Streams is a massively scalable, distributed, and high performance data streaming platform based on the Apache Kafka® project. AMQ Streams provides an event streaming backbone that allows microservices and other application components to exchange data with extremely high throughput and low latency. The core capabilities include: * A pub/sub messaging model, similar to a traditional enterprise messaging system, in which application components publish and consume events to/from an ordered stream\n   The long term, fault-tolerant storage of events The ability for a consumer to replay streams of events The ability to partition topics for horizontal scalability   Red Hat Integration - Camel K\nRed Hat Integration - Camel K is a lightweight integration platform, born on Kubernetes, with serverless superpowers.  "},{"uri":"https://RHTE-2023-Edge-Lab.github.io/use-case/organization/","title":"Organization","tags":[],"description":"","content":"During this lab, you will work in pair programming (that is to say: three duo).\n Duo A is in charge of implementing the code on ESP8266 to scan the incoming parcels using RFID and send the data over MQTT. Duo B is in charge of implementing the code on ESP8266 to scan the outgoing parcels using RFID and send the data over MQTT. Duo C is in charge of setting up Kafka Broker, MirrorMaker2 and implementing the Camel-K integration. Duo A or B (whoever finishes first) is in charge of deploying the MQTT broker.  "},{"uri":"https://RHTE-2023-Edge-Lab.github.io/pre-requisites/","title":"Pre Requisites","tags":[],"description":"","content":"Chapter 2 Pre-requisites Pick the section that matches your Operating System and install the pre-requisites.\n"},{"uri":"https://RHTE-2023-Edge-Lab.github.io/pre-requisites/linux/","title":"Linux","tags":[],"description":"","content":"OpenShift CLI Install the OpenShift CLI.\ncurl -sSfL https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.11.21/openshift-client-linux.tar.gz | tar -zx -C /usr/local/bin oc kubectl Install git.\nsudo dnf install git Install VScode.\nsudo rpm --import https://packages.microsoft.com/keys/microsoft.asc sudo sh -c \u0026#39;echo -e \u0026#34;[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\u0026#34; \u0026gt; /etc/yum.repos.d/vscode.repo\u0026#39; dnf check-update sudo dnf install code Open VScode and install the PlatformIO IDE plugin.\n"},{"uri":"https://RHTE-2023-Edge-Lab.github.io/use-case/ice-breaker/","title":"Ice Breaker","tags":[],"description":"","content":"TODO\n"},{"uri":"https://RHTE-2023-Edge-Lab.github.io/pre-requisites/macos/","title":"MacOS","tags":[],"description":"","content":"Install the OpenShift CLI.\ncurl -sSfL https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-mac.tar.gz | tar -zx -C /usr/local/bin oc kubectl Install git.\nbrew install git Install VScode.\nhttps://code.visualstudio.com/download Open VScode and install the PlatformIO IDE plugin.\n"},{"uri":"https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/","title":"MQTT Broker","tags":[],"description":"","content":"Duo A \u0026amp; B Deploy the MQTT Broker in your namespace apiVersion: broker.amq.io/v1beta1 kind: ActiveMQArtemis metadata: name: mqtt namespace: \u0026lt;your_namespace\u0026gt; spec: acceptors: - connectionsAllowed: 5 expose: true name: mqtt port: 1883 protocols: mqtt sslEnabled: false adminPassword: public adminUser: admin console: expose: true deploymentPlan: image: placeholder jolokiaAgentEnabled: false journalType: nio managementRBACEnabled: true messageMigration: false persistenceEnabled: false requireLogin: true size: 1 Deploy an AMQ Broker Address for your MQTT Broker kind: ActiveMQArtemisAddress apiVersion: broker.amq.io/v1beta1 metadata: name: address namespace: \u0026lt;your_namespace\u0026gt; spec: addressName: esp8266 queueName: myQueue0 routingType: anycast Deploy your Service in LoadBalancer type apiVersion: v1 kind: Service metadata: name: mqtt-lb namespace: \u0026lt;your_namespace\u0026gt; spec: ports: - name: mqtt-lb port: 1883 protocol: TCP targetPort: 1883 selector: ActiveMQArtemis: mqtt application: mqtt-app type: LoadBalancer Result MQTT Instances MQTT Pods MQTT Services "},{"uri":"https://RHTE-2023-Edge-Lab.github.io/esp8266/","title":"Program the ESP8266","tags":[],"description":"","content":"Duo A \u0026amp; B Program the ESP8266 TODO\n"},{"uri":"https://RHTE-2023-Edge-Lab.github.io/pre-requisites/windows/","title":"Windows","tags":[],"description":"","content":"TODO\n"},{"uri":"https://RHTE-2023-Edge-Lab.github.io/camel-k/","title":"Kafka Broker","tags":[],"description":"","content":"Duo C Install the Kafka Broker TODO\n"},{"uri":"https://RHTE-2023-Edge-Lab.github.io/kafka-broker/","title":"Camel-K Integration","tags":[],"description":"","content":"Duo C Develop the Camel-K Integration TODO\n"},{"uri":"https://RHTE-2023-Edge-Lab.github.io/mirromaker2/","title":"MirrorMaker2","tags":[],"description":"","content":"Duo C Configure MirrorMaker2 TODO\n"},{"uri":"https://RHTE-2023-Edge-Lab.github.io/testing/","title":"Testing","tags":[],"description":"","content":"Duo A, B \u0026amp; C Test your setup! TODO\n"},{"uri":"https://RHTE-2023-Edge-Lab.github.io/","title":"Welcome","tags":[],"description":"","content":"RHTE 2023 Edge Lab Welcome, dear Red Hatter, in this Lab where you will discover a part of the Red Hat Edge offering.\nYou will play with the following technologies:\n ESP8266 MQTT AMQ Broker AMQ Streams (Apache Kafka Broker \u0026amp; MirrorMaker2) OpenShift Camel-K  And if you plan to have a look under the hood, you will learn about:\n Quarkus ArgoCD Camel Kafka Streams  In this lab, you will be at the head of a shipping and delivery company, with multiple warehouses and you will deploy everything needed to: read the parcel RFID (using arduino and ESP32), send data to a MQTT broker over wifi, transform those data using Camel-K and send relevant events to the headquarter for reporting.\nAn application at the headquarter will display the parcels moving from one hub to another in realtime.\nTeam work and fun are expected ahead!\n"},{"uri":"https://RHTE-2023-Edge-Lab.github.io/use-case/test/","title":"","tags":[],"description":"","content":""},{"uri":"https://RHTE-2023-Edge-Lab.github.io/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://RHTE-2023-Edge-Lab.github.io/tags/","title":"Tags","tags":[],"description":"","content":""}]