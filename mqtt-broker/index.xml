<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MQTT Broker on RHTE 2023 Edge Lab</title><link>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/</link><description>Recent content in MQTT Broker on RHTE 2023 Edge Lab</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/index.xml" rel="self" type="application/rss+xml"/><item><title>Install the MQTT Broker (duo A or B)</title><link>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/mqtt-broker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/mqtt-broker/</guid><description>Deploy an MQTT broker in your namespace, by deploying this Custom Resource Definition.
To do so, connect to the OpenShift console, select the namespace of your team and click the + button in the top-right corner. Then, copy and paste the following content.
apiVersion: broker.amq.io/v1beta1 kind: ActiveMQArtemis metadata: name: mqtt spec: acceptors: - connectionsAllowed: 5 expose: true name: mqtt port: 1883 protocols: mqtt sslEnabled: false adminPassword: public adminUser: admin console: expose: true deploymentPlan: image: placeholder jolokiaAgentEnabled: false journalType: nio managementRBACEnabled: true messageMigration: false persistenceEnabled: false requireLogin: true size: 1 Now, create a new Kubernetes service to expose your MQTT broker to the internet.</description></item><item><title>Create the incoming MQTT Topic (duo A)</title><link>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/mqtt-topic-in/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/mqtt-topic-in/</guid><description>Create a topic in your MQTT broker by deploying this Custom Resource Definition.
To do so, connect to the OpenShift console, select the namespace of your team and click the + button in the top-right corner. Then, copy and paste the following content.
kind: ActiveMQArtemisAddress apiVersion: broker.amq.io/v1beta1 metadata: name: esp8266-in spec: addressName: esp8266-in queueName: myQueue0 routingType: anycast</description></item><item><title>Create the outgoing MQTT Topic (duo B)</title><link>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/mqtt-topic-out/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/mqtt-topic-out/</guid><description>Create a topic in your MQTT broker by deploying this Custom Resource Definition.
To do so, connect to the OpenShift console, select the namespace of your team and click the + button in the top-right corner. Then, copy and paste the following content.
kind: ActiveMQArtemisAddress apiVersion: broker.amq.io/v1beta1 metadata: name: esp8266-out spec: addressName: esp8266-out queueName: myQueue0 routingType: anycast</description></item><item><title>Final verification (duo A and B)</title><link>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/verification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/verification/</guid><description>Operator CRD Navigate in the OpenShift Administrator console, Operators &amp;gt; Installed Operators. Click on the AMQ Broker for RHEL 8.x operator. Open the All instances tab. Make sure you have the following objects: Pods Go to Workload &amp;gt; Pods and make sure the pod mqtt-ss-0 is present.
Services Go to Networking &amp;gt; Services and make sure a service named mqtt-lb is present.</description></item><item><title>Test the MQTT broker (duo A and B)</title><link>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://RHTE-2023-Edge-Lab.github.io/mqtt-broker/test/</guid><description>Go to the OpenShift Administrator console and click the command line terminal icon in the top-right corner to open a Web Terminal. In the Web Terminal, open two tabs: one to send messages, one to receive messages.
On the first terminal, connect to your MQTT Broker to read messages.
# Get the load balancer URL generated from the service created LOAD_BALANCER_URL=$(oc get svc mqtt-lb -ojsonpath=&amp;#34;{.status.loadBalancer.ingress[0].hostname}&amp;#34;) # Subscribe to MQTT topic mosquitto_sub -t esp8266-in -h ${LOAD_BALANCER_URL} -p 1883 -u admin -P public On the second terminal, push new messages to your MQTT Broker.</description></item></channel></rss>